// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x68\x1c\xd5\x17\x3f\xb3\x9b\x64\x37\x4d\xf3\xd1\xb4\xdb\xa6\xdb\xfc\xff\xdd\x87\x3f\xfc\x43\xd4\x7c\x59\x35\x2d\x82\xa1\xa2\x06\x69\x21\x14\xd1\xf8\xd2\xc9\x66\x32\x6d\xd6\x24\x9b\x75\x67\xd2\x6e\x92\x8a\xf1\xa1\x20\x7d\xca\x83\x1f\xa1\x14\xdd\x5a\x95\x3c\x58\xc8\x8b\x24\xa0\xb0\x05\xfb\xb0\x88\x0f\x11\x7c\x28\x14\x71\x1f\x44\x16\x44\x8c\x50\x70\xc1\x9a\x91\x7b\xef\x99\xdd\x3b\x67\x66\xe2\x16\xaa\xc9\x43\x2e\x24\xbf\x3d\xbf\xb9\xe7\xeb\xde\x73\xee\xdc\xdd\x37\x9f\x3b\xf5\x7c\x40\x51\xc0\x1e\x0a\xfc\x0e\x15\xa9\x32\x06\x8e\x48\x9f\xf1\xff\x61\x50\x20\x77\x50\x70\x97\x01\xa0\x09\x00\x2e\x02\x40\x0c\x00\xb4\x3d\xf7\x2d\xc6\xb7\x11\x63\xe7\x15\xf1\xfc\x22\x62\x44\xa9\xe3\x7c\xee\x23\xf1\x3c\x14\x00\xb8\x6f\x59\x16\xd5\xbb\xcc\x63\x03\x88\xc0\xb3\xe0\x65\x57\x8b\x96\x2c\x6a\xa7\xb4\xa5\x9d\x13\x5c\x5e\x55\x84\x7c\xb7\x25\xcc\xe5\xf8\x75\x61\x67\x3e\x5a\xb4\xe4\xbc\xe6\xf7\x6c\x94\xe5\x5a\x2e\x17\x5c\xfe\x8a\x96\x65\xe5\x6e\xa0\x1c\x04\x28\x58\x96\xb5\x1a\x02\xcf\x78\x57\x6b\x2a\xf1\x04\xaa\x5a\xa7\xff\x71\x7e\x7e\xee\x8e\x88\x6f\x6e\x9d\xe3\xec\xf5\x0d\x8c\x37\x8f\xb2\x88\x5b\x8b\x8a\x79\xb9\x38\xfa\x0f\x10\xff\x41\x16\xa4\xf0\x7f\x84\xef\xd7\x7a\x39\x3f\xb6\x12\xe7\x71\x1f\xed\xfd\xcc\x7d\x8c\x79\xd5\x00\xe4\x59\x9e\x3e\x76\x73\x41\xb4\x5f\x0b\xd0\x86\xf6\x0e\x7b\xd8\x8b\xc0\x9e\xf2\xfa\x8b\x78\x6f\xbb\xd6\xf3\xf6\x96\xfb\x17\x20\xfb\x87\x7e\x71\xde\xbb\xd2\x7c\xb6\x5f\xb9\xba\x8a\xfc\xef\xd4\xa9\x68\x8c\xb6\xb0\xf3\xb9\x76\xe5\xc1\xea\x34\x87\xf5\x13\x09\xed\xe5\x38\x7f\xc5\xbb\x2e\x69\x1d\xfa\xc7\x25\x36\x68\x16\x9f\x1f\xc5\xfe\xbd\x7b\xde\x7b\xfd\xe4\xfe\x16\x75\x5f\x72\xf8\xb7\xe3\xcb\xbd\x2e\xd0\x5e\x2f\x2d\x7a\xcf\xf2\xca\x3f\xf7\x56\xf5\xeb\x7b\x6f\xcb\x3c\x5e\x16\xeb\xeb\x3a\x07\xdc\xeb\xb1\xb1\xa5\x9d\xd3\x22\x6f\x72\x0e\xcc\xcf\x89\x75\x8e\x97\xfb\xcb\xdd\xef\x05\xd2\xef\xa5\x87\xda\xef\x27\x30\x0e\xda\xef\x45\xd2\xef\x85\xea\xfb\xbd\x4e\xee\xf7\xef\xac\xaa\xf6\x63\xc7\x9e\x1f\xa2\x30\x57\xeb\xc4\xbe\x69\xaf\x3d\xe8\xf9\x21\x1e\xdc\x1d\xc1\xfc\xc3\x68\x1f\x31\x12\xde\xde\xf3\xc9\xbf\xaf\xfe\xa9\xf3\x2a\x22\xf6\xa3\xde\xf9\x5c\xbb\xfa\x80\xe7\x15\xf6\x7b\x24\xdc\xc0\x71\x7e\x0e\xfb\xe7\x6a\xf1\xe1\x9c\x53\xe3\xde\xeb\x98\xdb\x2f\x30\xde\x2b\x02\x58\xc5\xba\x9a\xe8\x14\xeb\xa5\x75\xe2\x7b\xbd\x13\xe3\xe9\xc4\x3e\xea\x2c\x20\x62\x9f\x75\xae\x23\xe6\x11\x6f\x21\xae\x21\xae\x20\x2e\x23\x66\x11\x97\x10\x17\x11\xdf\x46\x5c\x40\xcc\x20\xa6\x10\xc7\x11\x47\x10\x87\x11\x87\x10\x07\x11\x07\x10\xfb\x11\x7b\x10\x3b\x10\x63\x88\x6d\x88\x2d\x88\x61\x44\x40\x2c\x6d\x62\xfe\x88\x45\xc4\x02\xe2\x1d\xc4\x75\xc4\x3c\xe2\x2d\xc4\x35\xc4\x15\xc4\x65\xc4\x2c\xc7\x57\x14\x00\xcb\x02\x68\xc6\x7d\xc8\x7d\x8a\xfb\x5c\x07\x90\xdd\xac\xf4\x3b\xdb\x97\xb3\x8a\xd8\xe7\xc7\x3c\xea\x38\x37\x4a\xeb\xa0\xb1\x2c\x3b\xdf\xdb\xd7\xb8\x5f\xbb\xbf\xb4\xe8\xd2\x26\xad\xaf\x6b\x9b\xce\xf3\x79\x69\xd3\x5d\x6f\xf4\x5c\xa6\x75\xc5\xba\x88\x4d\x69\xc1\x78\x76\x47\x65\x28\xb8\x2e\xbc\xe3\x5a\xb6\x3b\x9a\x9d\x35\x02\x58\x37\x61\xfc\xbc\x3b\x2a\x23\x84\x6b\x53\x62\x47\x7c\xc7\x76\x47\xb3\xb3\x46\xcd\x76\x07\xb0\x83\x07\x3b\x6f\xd8\xbb\xa3\x66\xf7\x2c\x76\x0d\x05\x6b\x87\xd7\xcf\x6e\x11\x39\xc6\x0b\x43\xa7\x60\xd3\xb2\xf8\x3d\xc8\x7e\x4d\x29\x73\x67\x20\x7c\xa9\x41\x61\xdf\xaa\xdb\xf0\xcf\x1e\x59\xe9\xc0\x6e\x07\x80\x63\xd2\xb3\x01\x52\x78\xec\xf9\x4b\x92\x3c\x12\x74\x3f\x37\x25\x79\xd0\x43\xff\x1d\x49\x1e\xae\xf2\x65\xf1\x01\xef\x83\xdf\x2c\xca\xdf\xe3\xf6\x83\x90\x21\xfc\x97\xc8\x2f\x12\xfb\xbf\x70\xbe\x16\x16\xc8\xfc\x6f\x91\xef\x21\xf1\xfe\xc1\xe5\x10\x0c\x91\x3c\x7f\x42\x3e\x4b\xec\x7c\x85\x7c\x0f\xf1\xfb\x39\xf2\x45\xc2\xff\xc0\xf9\x7a\x58\x24\x76\xbe\x46\xbe\x9f\xc4\x73\x87\xcb\x0d\x30\xe8\xb1\x6e\x41\x08\xba\x49\xce\xd7\xfa\xf0\x21\x1f\xbe\xde\x87\x6f\x70\x71\xef\x01\xc0\x3e\x38\x50\x96\xed\x56\xbc\xc4\xf9\x88\x8b\xbf\xc2\xf9\xd6\x32\xdf\x8e\xf9\x3d\xc3\xf9\x46\x17\xaf\xf8\x5c\xb5\x5e\x54\xbc\xf9\xef\x01\xa0\x55\xca\xcb\xae\xcf\x6f\x38\x5f\xc9\xcb\xae\xcb\xd3\xdc\x6f\xb3\xcb\xef\x71\x1f\xfb\x67\xf9\xfc\x16\xd7\xfc\x5e\xce\x37\xb9\xf8\xa3\x9c\xdf\xe7\xe2\x53\x9c\xdf\xef\xe2\xcf\x28\x2c\xce\xca\x3a\xdb\xfd\x71\x93\xc7\x5f\xd9\x5f\xbb\x67\xbf\xe0\x7c\x65\x7f\xed\x7e\x8d\xa1\xcc\x44\xf6\x55\x72\x58\x92\x59\x4c\x19\x49\x3e\xc4\xec\x49\x32\xdb\xb5\x0e\x69\xfd\xff\x23\xad\x97\x82\xbf\x7f\x2c\x4b\x32\xeb\x69\xfb\xd2\xc7\xe4\xff\xb2\x75\x97\xe4\xa8\x74\xed\xb1\xe3\x19\x21\xf1\x2c\x90\x78\x96\x49\x3c\x25\x70\xc6\x33\x40\xec\x2d\x10\x7b\x59\x62\x2f\x4f\xec\xf5\x93\xfc\x86\x49\x7e\x6b\x24\xbf\x70\xc0\x29\x8f\x90\x7c\x6f\x91\x7c\x63\x41\xa7\xdc\x4f\xe2\x4d\x91\x78\x17\x49\xbc\x6b\x24\x5e\x20\xf1\xca\xf1\xb1\xee\xeb\x08\x38\xed\xb5\x4b\xfa\x8d\xc4\x7f\x13\xa9\x87\x66\x52\x0f\xac\xba\x97\x24\x99\x57\xef\xb9\xc4\xa4\xa9\xa7\xd5\x19\x43\x4f\xab\xa3\x89\x64\x3c\x3d\x0b\x5d\xa6\x9e\x31\x61\x2a\x9e\x32\xba\xcd\x74\x5c\xd3\x55\xfd\x82\x9e\x34\x0d\xc1\x18\x66\x3c\x6d\xaa\xb6\xa4\x4d\xcf\x24\x4d\x3d\x8d\xd2\xe4\xb4\x61\xaa\x5c\xa5\x32\x59\x9b\x70\x30\xfc\xf3\x98\x9a\x4a\x8c\x19\xa0\x5e\xd0\xd3\x46\x62\x3a\x29\x9e\x08\xe7\x6a\x2a\x6e\x8e\x83\x3a\x99\xd0\xf4\xa4\xa1\x43\x57\x5a\x9f\xec\xd2\xc7\xd5\x73\xe9\xf8\x94\x0e\x33\xa9\xf4\xf4\xa8\xae\xce\x70\x23\x30\x93\xd6\x4d\x07\x31\xe1\x22\x1c\x12\xb3\x25\x2c\x74\xcb\x8c\xad\x24\x93\x13\x9e\xa4\x83\x31\xf4\xe4\x98\x2a\xe5\x07\xe7\x66\x92\x9a\x9a\x18\x03\x2e\xa5\xa6\x13\x49\x53\x35\xb4\x71\x7d\x0c\xff\xa7\xd2\xd3\x9a\x6e\x18\xaa\x9e\xd1\x35\x6e\xae\x32\xaf\x9b\xcf\xe8\xf6\x98\x37\x15\x4f\x24\xbb\x34\xe8\x32\xcc\xb4\x19\x1f\x85\x2e\x63\x76\x8a\xe1\xa9\x93\x27\xfb\xd4\xe3\x0c\x7a\xd4\xa7\x84\xf4\x24\x83\xc7\xd5\x27\x18\xf4\x0a\x38\xa6\xf6\x09\xb2\x4f\x4c\xe9\x13\xcf\xfa\x84\x1e\x92\xbd\x7d\xf0\x50\xc6\x27\x0a\x78\xbe\xa5\xfa\x0f\x0b\x0c\x92\xf7\x1a\xbd\xf7\x1e\x40\xae\x8e\xf0\x03\x3e\xfe\xe8\xd5\xf0\xd7\xbf\xd1\xcf\x12\xff\xe4\xe7\x7c\xf8\x99\xbf\x95\xdd\xa3\x88\xbf\xd7\xd9\x7d\xdc\x06\x22\x4f\x5b\xbf\x7c\x0f\x53\xbc\xfd\x17\xd0\x2f\xbd\x6f\x51\xff\x7f\xfa\xf8\xcf\x1c\x12\x38\x24\xf9\xaf\xf5\xf0\xff\x88\x8f\xff\x18\x2e\x14\xbd\xcf\x51\xff\xff\x57\xbc\xfd\xe7\xd1\xff\x8a\xe4\x3f\xe4\xe1\xff\xa0\x8f\xff\x05\x7c\x65\xd3\xfb\x22\xf5\xdf\xea\xe3\x3f\x83\x17\x5a\x39\xff\x7a\x0f\xff\x73\x3e\xfe\xf3\x38\x91\xde\x47\xa9\xff\x0b\x7e\xf9\xa3\xff\x98\xe4\xbf\xc1\xc3\xff\x09\xac\x3f\xda\x03\x31\x7c\xe5\xb7\x93\xfc\x69\xfd\x3e\xea\xa3\xff\xf4\xde\xea\xf4\x07\x7d\xf4\x87\x1b\xab\xd3\x7f\xd5\x47\xdf\x6c\xaa\x4e\x3f\xea\xa3\xbf\xd8\x5c\x9d\xfe\x65\x1f\xfd\xcf\x5a\xaa\xd3\x9f\xf0\xd1\xcf\xef\xab\x4e\xff\x7d\x1f\xfd\x1f\x5b\xbd\xe7\xd3\xf3\xeb\x0d\x1f\xfd\xa2\x8f\x3e\x95\x6f\xa0\x3e\xbd\xfe\x6f\xa0\xfe\x0a\xe1\x69\xfd\x7e\xe8\x77\x7e\x79\xf4\xcf\x41\x8f\xfa\xbd\xa9\x78\xff\xbe\x97\xc5\xab\xec\xa0\x74\xef\x69\x95\xf4\xed\xef\x9b\x7f\x05\x00\x00\xff\xff\x89\x22\x6b\x22\x80\x21\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 8576,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1641979226, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
