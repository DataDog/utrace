// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x68\x1c\x55\x18\xff\x66\x37\x7f\x36\xd9\x36\xdd\xa6\xdd\xba\xd9\x56\x9a\x83\x60\x88\x9a\x7f\xad\x92\xf6\x62\x28\xa8\x41\x5a\x08\x45\x34\x82\x74\xb2\x99\x4c\x9b\x35\xc9\x66\xdd\x99\xd4\xfc\xa9\x58\x0f\x85\xd2\x53\x0e\x55\x43\x29\x9a\x5a\x95\x5e\x0a\xb9\x48\x02\x0a\x13\xb0\x87\x20\x3d\x44\xf0\x10\x28\xe2\x9e\x64\x41\xc4\x08\x15\x73\xa8\x19\x79\xef\x7d\xb3\xf3\xe6\x9b\x99\x74\x0b\x85\xe4\x90\x07\xc9\x6f\xbf\xdf\xbc\xef\xdf\x7b\xdf\xf7\xde\xec\x7e\xfc\xda\xe9\xd7\x23\x8a\x02\xce\x50\xe0\x5f\x70\x25\x77\x14\x9b\xdc\xcf\x3d\xf8\xbf\x09\x14\xb0\x0e\x09\x2e\x45\x94\xb4\xf4\x23\x9b\xa1\xf5\x95\x90\x6b\x23\x00\x8f\x6c\xdb\xa6\xf3\xae\x70\x9f\x00\x49\x38\xc9\xe5\x45\x45\xc8\x0f\x12\x31\x2e\x67\x6e\x09\x3b\x33\xe9\x92\xed\xcc\x6f\x60\x72\xfd\x7a\x59\xae\xe6\x72\xd1\xe7\xaf\x64\xdb\xb6\x75\x1b\xe5\x28\x40\xd1\xb6\xed\xc5\xda\xe0\x78\x17\xab\xdc\x78\x22\x01\xcf\x2f\x28\x00\xcd\x00\xf0\x21\x62\x52\x79\x8e\xf3\x33\xd3\x6b\x22\xbe\xe9\x55\x8e\x53\xb7\xd6\x31\xde\x15\x94\x45\xdc\x5a\x5a\xcc\xb3\x32\xe8\x3f\x42\xfc\x47\x59\x90\xc2\xff\x61\x36\xbf\x7e\xb5\x9c\x1f\x5b\x89\x0b\x80\xfe\x11\xad\xaf\x31\xaf\x2a\x80\x15\x96\x67\x88\x5d\x2b\x8a\xf6\xab\x01\x52\x68\xaf\x29\xc0\x5e\x12\xea\xcb\xeb\x2f\xe2\xbd\xe7\x5b\xcf\x7b\x5b\xee\x5f\x84\xec\x1f\xfa\xc5\x79\x9f\x4a\xf3\xd9\x7e\x59\x35\x18\x6f\xcc\x6b\x4f\xbb\xf6\x64\x75\x63\xe1\x7e\x26\x6b\xf7\x88\xfd\xb8\x16\x5c\x27\xb4\x2e\xc2\xf3\x10\x0b\x36\x85\xcf\x8f\x62\x7d\x3f\xb8\x10\x9c\x8f\x53\xff\x6e\x1d\x6e\x78\xfc\x3b\xf1\x59\x1f\x08\x74\xea\x47\x4b\x3f\xb4\x83\xf2\xb7\x3e\x11\xe8\xaf\x37\xb1\x60\x72\x1e\x0f\xb7\xcc\xe3\x6d\xb1\xbe\xbe\xbe\xf4\xaf\xc7\xfa\x96\x76\xce\x88\xbc\x49\x5f\xce\x4c\x8b\x75\xce\x94\xeb\xdd\xdf\x7f\x45\xd2\x7f\x1b\x4f\xb5\xff\x4e\x62\x1c\xb4\xff\x4a\xa4\xff\x8a\x95\xf7\x5f\x8d\xdc\x7f\xbf\xd8\x15\xed\xc7\x8e\xed\x67\x51\x98\x8b\x35\x62\xdf\xb4\xf7\x9f\xb4\x9f\xc5\x83\x07\x03\x98\x7f\x0c\xed\x23\x26\x63\xdb\x73\x5e\x3c\xbe\xaf\xc4\xf9\xf1\xf8\xfa\xf1\xf7\xd3\xd6\xf7\x53\x52\xec\x47\x9d\xf7\xb9\x76\x63\xc3\x97\xf7\xc6\x56\xe7\x15\xf6\x7b\x32\x16\xe7\x38\x33\x8d\xfd\x73\xa3\xf4\x74\xce\xa9\xe1\xe0\x75\xb4\x0e\x08\xcc\x74\x8a\x00\x16\xb1\xae\x46\x5a\xc5\x7a\x69\xad\x22\x8f\x99\x56\x8c\xa7\x15\xfb\xa8\xb5\x88\x88\x7d\xd6\xba\x8a\xb8\x82\xb8\x8c\xb8\x84\xb8\x80\x78\x07\x71\x1e\x71\x0e\x71\x16\xf1\x2a\xe2\x65\xc4\x49\xc4\x3c\xe2\x30\xe2\x00\x62\x3f\x62\x1f\x62\x2f\x62\x0f\x62\x37\x62\x07\x62\x0b\x62\x33\x62\x0a\x31\x81\x18\x43\x04\xc4\x8d\x4d\xcc\x1f\xb1\x84\x58\x44\x5c\x43\x5c\x45\x5c\x41\x5c\x46\x5c\x42\x5c\x40\xbc\x83\x38\xcf\xf1\x1d\x05\xc0\xb6\x01\xf6\xe1\x3e\x58\xdf\xe2\x3e\xd7\x00\xcc\x6f\xba\xfd\xce\xf6\xe5\x9c\x22\xf6\xf9\xa5\x80\x3a\xb6\x06\x69\x1d\xec\x2d\xcb\x0d\x52\xff\x6b\xf5\x37\xb9\x5f\xa7\xbf\xb4\xf4\xdc\x26\xad\xaf\x9b\x9b\xde\xf3\x79\x6e\xd3\x5f\x6f\xf4\x5c\xa6\x75\xc5\xba\x88\x4d\x49\x60\x3c\xbb\xc3\x1d\x0a\xae\x0b\xef\xb8\xc4\x76\x47\xb3\xb3\x46\x04\xeb\x26\x86\x9f\x77\x87\x3b\x6a\x71\x6d\x36\xd8\x11\xdf\xb2\xdd\xd1\xec\xac\x51\xb5\xdd\x01\xec\xe0\xc1\xce\x1b\x76\x77\x54\xed\x9e\xc5\xbe\xa1\x60\xed\xf0\xfa\xd9\x2d\x22\xcf\x78\xa3\xef\x34\x6c\xda\x36\x7f\x0f\x72\xae\x29\x65\xfa\x2c\xc4\x2e\xc5\x15\xf6\xad\x3a\x85\x7f\xce\xe8\x90\x0e\xec\x23\x00\x70\x5c\x7a\xb6\x4a\x6c\xb3\xe7\x6f\x49\xf2\x40\xd4\xff\xdc\x94\xe4\x5e\xc5\xff\xfc\xba\x24\xf7\x57\x78\x59\x7c\xc1\xfb\xe0\x6f\x9b\xf2\x3f\x71\xfb\x51\x68\x26\x76\x7e\xe6\x7c\x35\x2c\x93\xf9\x7f\x72\xbe\x16\xfa\x48\xdc\xbf\x23\x3f\x4f\xe6\xff\x80\x7c\x07\xb1\xff\x1d\xf2\x25\xc2\xff\xc6\xf9\x3a\x98\x25\x76\x7e\x44\xbe\x9b\xac\xc7\x1a\x97\xe3\xd0\x1b\xb0\x0e\x51\x88\xfa\x49\xce\x57\x87\xf0\xb5\x21\x7c\x5d\x08\x1f\xf7\x71\x9f\x01\xc0\x7e\x38\x58\x96\x9d\xd6\xba\xc4\xf9\xa4\x8f\xbf\xc6\xf9\xc6\x32\x7f\x04\xf3\x7b\x95\xf3\x7b\x7d\xbc\x12\xf2\xea\xf4\xa6\x12\xcc\xff\x0a\x00\x8d\x52\x5e\x4e\xbd\xdd\xe7\xbc\x9b\x97\x53\x67\x67\xb8\xdf\x7d\x3e\xbf\x27\x42\xec\x9f\xe3\xf3\x13\xbe\xf9\x9d\x9c\x6f\xf0\xf1\x47\x39\xbf\xdf\xc7\xe7\x39\x7f\xc0\xc7\x9f\x55\x58\x9c\xee\x3a\x3b\xf5\x7e\x97\xc7\xef\xee\xaf\x53\x5f\xdf\x73\xde\xdd\x5f\xa7\xff\x9c\x9f\x95\xc4\x77\x04\x80\x0e\x49\x66\x5e\x97\x24\xf9\x30\xab\x2b\x49\x6e\x02\x28\xd7\x1d\x83\x34\x00\xcc\x4a\x32\xeb\xc9\x75\x49\x4e\xc9\xe7\x06\xfa\xeb\x26\xfe\xae\x12\x7f\x3d\x92\xcc\xaa\xe7\xb2\x24\x3f\x0b\x50\xee\x2b\xc7\xde\x0a\xb1\x27\xc7\xc7\xec\xf5\x2b\xde\xf8\x97\x48\xfc\xb1\x88\x57\x1e\x88\x78\xf3\x59\x8e\x78\xf3\x69\x8e\x7a\xe5\x6e\x12\x6f\x9e\xc4\x3b\x4b\xe2\x5d\x22\xf1\x02\x89\x57\x8e\x8f\x75\x43\x4b\xc4\x6b\xef\x88\xa4\x1f\x27\xfe\xd9\x99\xdc\x2f\xc9\xac\x6b\x26\x25\x99\x55\xe1\x9c\x24\xf3\xea\x3e\x9f\x1d\x35\xf5\x82\x3a\x61\xe8\x05\x75\x30\x9b\xcb\x14\xa6\xa0\xcd\xd4\x27\x4d\x18\xcb\xe4\x8d\x76\xb3\x90\xd1\x74\x55\xbf\xa8\xe7\x4c\x43\x30\x86\x99\x29\x98\xaa\x23\x69\xe3\x13\x39\x53\x2f\xa0\x34\x3a\x6e\x98\x2a\x57\x71\x27\x6b\x23\x1e\x86\x7f\x1e\x52\xf3\xd9\x21\x03\xd4\x8b\x7a\xc1\xc8\x8e\xe7\xc4\x13\xe1\x5c\xcd\x67\xcc\x61\x50\x47\xb3\x9a\x9e\x33\x74\x68\x2b\xe8\xa3\x6d\xfa\xb0\x7a\xbe\x90\x19\xd3\x61\x22\x5f\x18\x1f\xd4\xd5\x09\x6e\x04\x26\x0a\xba\xe9\x21\x46\x7c\x84\x47\x62\xb6\x84\x85\x76\x99\x71\x94\x64\x72\x24\x90\xf4\x30\x86\x9e\x1b\x52\xa5\xfc\xe0\xfc\x44\x4e\x53\xb3\x43\xc0\xa5\xfc\x78\x36\x67\xaa\x86\x36\xac\x0f\xe1\xff\x7c\x61\x5c\xd3\x0d\x43\xd5\x27\x75\x8d\x9b\x73\xe7\xb5\xf3\x19\xed\x01\xf3\xc6\x32\xd9\x5c\x9b\x06\x6d\x86\x59\x30\x33\x83\xd0\x66\x4c\x8d\x31\x3c\x7d\xea\x54\x97\x7a\x42\xc0\x2b\x0c\x8e\xa9\x2f\x33\xe8\x10\xd0\xa9\x1e\x63\x70\x5c\xed\x12\xcf\xba\xc4\x4c\x84\xce\x2e\x78\x0a\xe3\x1b\x05\x02\x6f\x95\xd2\x33\x02\xff\x21\xf7\x13\x7d\xef\x3c\x88\x5c\x0d\xe1\x7b\x42\xfc\xd1\x57\xb3\xbf\x1e\xa3\x4f\xef\x59\xf2\x73\x3a\xfc\xc1\x6f\x51\xff\x58\xc3\xab\xc9\xe9\xe3\x14\x88\x3c\x1d\xfd\xf2\x79\xa6\x04\xfb\xcf\xa3\x5f\xfa\xbe\x43\xfd\xff\x17\xe2\xbf\x17\x7f\xaf\xeb\x90\xfc\x57\x07\xf8\x7f\x21\xc4\x7f\x0f\x6e\x0a\x7d\x9f\xa2\xfe\x9f\x57\x82\xfd\x4f\xa2\xff\x05\xc9\x7f\x6d\x80\xff\x43\x21\xfe\xe7\x91\xa0\xef\x6b\xd4\x7f\x63\x88\xff\x16\xac\x9f\x3e\xc9\x7f\x5d\x80\xff\xe9\x10\xff\x25\xbc\xe2\xe9\xfb\x20\xf5\x7f\x31\x2c\x7f\xf4\xdf\x2c\xf9\x8f\x07\xf8\x3f\x89\xf5\x47\x7b\xa0\x47\xfc\xfc\x5d\xbe\xb7\x9d\x41\xeb\xf7\xc5\x10\xfd\xf7\xe2\x95\xe9\xf7\x86\xe8\x4f\xee\xa9\x4c\xff\xdd\x10\xfd\xeb\x7b\x2b\xd3\x4f\x87\xe8\x2f\x34\x54\xa6\x7f\x25\x44\xff\xfe\xbe\xca\xf4\x47\x42\xf4\x4b\x89\xca\xf4\x3f\x0f\xd1\xaf\x6a\x0c\x9e\x4f\xcf\xaf\x8f\x42\xf4\x63\x21\xfa\x54\xbe\x8d\xfa\xf4\x75\x3d\x81\xfa\x0b\xd4\x2e\x91\xbf\x0c\x39\x3f\xe6\x02\xfa\xe7\x50\x40\xfd\xde\x55\x82\x7f\x5f\x5b\x46\xff\x29\xe9\x3d\x27\x21\xe9\x3b\xdf\xf7\xfe\x0f\x00\x00\xff\xff\x5b\xcd\x4b\xac\x20\x20\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 8224,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1641825912, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
