// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x68\x1c\xd5\x17\x3f\xb3\x9b\x64\x37\x49\xd3\xa6\x69\xb7\x4d\xb7\xf9\xff\x9b\x07\xc1\x10\x35\x5f\x56\x4d\x8b\x60\x2c\xa8\x41\x5a\x08\x45\x34\xbe\x74\xb2\x99\x4c\x9b\x35\xc9\x66\xdd\x99\xb4\x49\xb6\x62\x7c\x28\x94\x3e\xe5\xc1\x8f\x50\x8a\x6e\xad\x4a\x1e\x2c\xe4\x45\x12\x50\xd8\x82\x7d\x58\xc4\x87\x08\x3e\x14\x8a\x98\x07\x91\x05\x11\x2b\x04\x5c\xb0\x66\xe4\xde\x7b\x26\x73\xe7\xcc\x4c\xba\xad\xd5\xe4\x21\x17\x92\xdf\x9e\xdf\xdc\xf3\x75\xef\x39\x77\xee\xee\xdb\x2f\x1c\x7f\x31\xa4\x28\x60\x0f\x05\xfe\x00\x47\x72\x46\xcf\x41\xe9\x33\xfe\x3f\x00\x0a\xe4\xf7\x09\xee\x02\x00\x54\x02\x40\xb6\xa6\x64\xd9\xf2\x4e\x00\x38\x07\x00\xcd\x00\xa0\xd5\xac\x72\xbe\x91\x18\x3f\xa3\x88\xe7\xe7\x10\x63\x4a\x15\xe7\xf3\x1f\x8b\xe7\x91\x10\xc0\xaa\x65\x59\x54\xef\x02\x8f\x15\x20\x06\xcf\x83\x9f\x5d\x2d\x7e\xc7\xa2\x76\xee\x6c\x68\xa7\x9b\xcb\x8b\x8a\x90\x6f\xd7\x47\xb9\x9c\xb8\x2a\xec\x64\xe3\x2b\xae\xbc\xb2\x35\x45\x8f\xfd\x15\xcb\xb2\xf2\xd7\x50\x0e\x03\x94\x2c\xcb\x5a\x8c\x80\x6f\x7c\x8b\x15\x8e\xff\x50\x59\xeb\xf2\x08\xe7\xb3\xd3\xb7\x44\x3c\xd3\xcb\x1c\xa7\xae\x16\x31\xbe\x02\xca\x22\x4e\x2d\x2e\xe6\xe5\x13\xe8\x3f\x44\xfc\x87\x59\x90\xc2\xff\x41\xbe\x3f\xcb\xeb\xf9\xb1\xcc\xcf\xe0\xbe\xd9\xfb\x97\xff\x04\xf3\xaa\x00\x28\xb0\x3c\x03\xec\xe6\xc3\x68\xbf\x12\xa0\x11\xed\x1d\xf0\xb1\x17\x83\x9a\xf5\xf5\x16\xf1\xde\xf4\xac\xe7\xcd\x0d\xf7\x2b\x44\xf6\x0b\xfd\xe2\xbc\xf7\xa4\xf9\xac\x2e\xf3\x55\x8e\xec\xae\xcb\xbb\x0f\x5c\x97\x77\x37\x8c\x4f\x34\x46\x63\xd4\xfd\x5c\xbb\x54\xf2\xe4\x59\xda\xc0\x4e\x1e\xeb\x27\x16\xd9\xc1\x31\x7b\xa9\x48\xea\xd0\x5b\xe7\xc5\x0d\xe3\x12\x1b\x34\x85\xcf\x0f\x61\xff\xde\x3e\xe3\xbf\x7e\xf7\xea\x6f\x3b\xbe\xfc\x9b\x02\xed\xf5\xd2\xe2\xd8\xef\x24\xff\xfc\x3b\xe5\xaf\xef\xc6\x7d\xff\xaa\x58\xdf\x7f\xdc\xf7\x27\x44\xde\xa4\xef\xb3\xd3\x62\x9d\x69\xff\xff\x77\xfd\x7e\x14\xe3\x78\x88\xfd\x5e\x25\xf7\xfb\xf7\x56\x59\xfb\xb1\x65\xcf\x0f\x51\x98\x8b\x55\x62\xdf\xb4\x37\xee\xf7\xfc\x10\x0f\x6e\x0f\x60\xfe\x51\xb4\x8f\x18\x8b\x6e\xee\xf9\x14\xdc\x57\xff\xd6\x79\x15\x13\xfb\x51\xed\x7e\xae\x5d\xbe\xcf\xf3\x0a\xfb\x3d\x16\xad\xe5\x98\x9d\xc6\xfe\xb9\xec\x7d\x5f\x3e\xd0\x39\x35\xec\xbf\x8e\xf9\x3d\x02\x13\x9d\x22\x80\x45\xac\xab\x91\x56\xb1\x5e\x5a\xab\xc8\x23\xdb\x8a\xf1\xb4\x62\x1f\xb5\xae\x20\x62\x9f\xb5\x2e\x23\x16\x10\x6f\x20\x2e\x21\x2e\x20\xce\x23\xe6\x10\xe7\x10\x67\x11\x2f\x22\xce\x20\x4e\x22\xa6\x11\x87\x11\x07\x10\xfb\x11\xfb\x10\x7b\x11\x7b\x10\xbb\x11\x3b\x10\x5b\x10\x9b\x11\x1b\x11\xeb\x11\xa3\x88\x80\x58\x5a\xc3\xfc\x11\x8b\x88\x2b\x88\xb7\x10\x97\x11\x0b\x88\x37\x10\x97\x10\x17\x10\xe7\x11\x73\x1c\x5f\x53\x00\x2c\x0b\x60\x17\xee\x43\xfe\x33\xdc\xe7\x2a\x80\xdc\x9a\xd3\xef\x6c\x5f\x4e\x29\x62\x9f\x9f\xf0\xa9\xe3\xfc\x20\xad\x83\xba\x75\xd9\xfd\xde\xbe\xc2\xfd\xda\xfd\xa5\xc5\xe7\xd6\x68\x7d\x5d\x59\x73\x9f\xcf\x73\x6b\xde\x7a\xa3\xe7\x32\xad\x2b\xd6\x45\x6c\x4a\x3d\xc6\xb3\x3d\x9c\xa1\xe0\xba\xf0\x8e\xab\xdf\xec\x68\xb6\xd6\x08\x61\xdd\x44\xf1\xf3\xf6\x70\x46\x04\xd7\xa6\xc4\x8e\xf8\x96\xcd\x8e\x66\x6b\x8d\x8a\xcd\x0e\x60\x0b\x0f\x76\xde\xb0\x77\x47\xc5\xf6\x59\xec\x19\x0a\xd6\x0e\xaf\x9f\xed\x22\x72\x8d\x97\xfa\x8e\xc3\x9a\x65\xf1\x7b\x90\xfd\x9a\x52\xa6\x4f\x42\xf4\x7c\xad\xc2\xbe\x55\x37\xe2\x9f\x3d\x72\xd2\x81\xdd\x04\x00\x87\xa5\x67\x3d\xa4\xf0\xd8\xf3\x57\x24\x79\x20\xec\x7d\x6e\x4a\x72\xaf\x8f\xfe\xbb\x92\xdc\x5f\xe6\xcb\xe2\x43\xde\x07\xbf\x5b\x94\x5f\xe5\xf6\xc3\x70\x91\xf0\x5f\x21\x3f\x4b\xec\xff\xca\xf9\x4a\x98\x21\xf3\xbf\x43\xbe\x83\xc4\xfb\x27\x97\x23\xd0\x47\xf2\xfc\x19\xf9\x1c\xb1\xf3\x35\xf2\x1d\xc4\xef\x17\xc8\x17\x09\xff\x23\xe7\xab\x61\x96\xd8\xf9\x06\xf9\x6e\x12\xcf\x2d\x2e\xd7\x42\xaf\xcf\xba\x85\x21\xec\x25\x39\x5f\x19\xc0\x47\x02\xf8\xea\x00\xbe\xd6\xc3\xbd\x0f\x00\xbb\x61\xef\xba\x6c\xb7\xe2\x79\xce\xc7\x3c\xfc\x25\xce\x37\xac\xf3\x4d\x98\xdf\x73\x9c\xaf\xf3\xf0\x4a\xc0\x55\xeb\x65\xc5\x9f\xff\x01\x00\x1a\xa4\xbc\xec\xfa\xfc\x96\xf3\x4e\x5e\x76\x5d\x9e\xe0\x7e\x77\x79\xfc\x1e\x09\xb0\x7f\x8a\xcf\xaf\xf7\xcc\xef\xe4\xfc\x4e\x0f\x7f\x88\xf3\xbb\x3d\x7c\x9a\xf3\x7b\x3c\xfc\x49\x85\xc5\xe9\xac\xb3\xdd\x1f\xd7\x79\xfc\xce\xfe\xda\x3d\xfb\x25\xe7\x9d\xfd\xb5\xfb\xb5\x03\x65\x26\xb2\xaf\x92\xc3\x92\xcc\x62\xba\x28\xc9\xfb\x01\x60\x41\x92\xd9\xae\xb5\x48\xeb\xff\x3f\x69\xbd\x14\xfc\xfd\x63\x5e\x92\x59\x4f\xdb\x97\x3e\x26\xff\x9f\xad\xbb\x24\xc7\xa5\x6b\x8f\x1d\xcf\x00\x89\x67\x86\xc4\x33\x4f\xe2\x29\x81\x3b\x9e\x1e\x62\x6f\x86\xd8\xcb\x11\x7b\x05\x62\xaf\x9b\xe4\xd7\x4f\xf2\x5b\x22\xf9\x45\x43\x6e\x79\x80\xe4\x7b\x83\xe4\xdb\x1c\x76\xcb\xdd\x24\xde\x34\x89\x77\x96\xc4\xbb\x44\xe2\x05\x12\xaf\x1c\x1f\xeb\xbe\x96\x90\xdb\x5e\x93\xa4\x5f\x47\xfc\xb3\x2a\xed\x97\x64\x56\xfd\x93\x92\xcc\xaa\x7b\x4e\x92\x79\xf5\x9e\x4e\x8e\x9a\x7a\x46\x9d\x30\xf4\x8c\x3a\x98\x4c\x25\x32\x53\xd0\x66\xea\x93\x26\x8c\x25\xd2\x46\xbb\x99\x49\x68\xba\xaa\x9f\xd5\x53\xa6\x21\x18\xc3\x4c\x64\x4c\xd5\x96\xb4\xf1\x89\x94\xa9\x67\x50\x1a\x1d\x37\x4c\x95\xab\x38\x93\xb5\x11\x17\xc3\x3f\x0f\xa9\xe9\xe4\x90\x01\xea\x59\x3d\x63\x24\xc7\x53\xe2\x89\x70\xae\xa6\x13\xe6\x30\xa8\xa3\x49\x4d\x4f\x19\x3a\xb4\x65\xf4\xd1\x36\x7d\x58\x3d\x9d\x49\x8c\xe9\x30\x91\xce\x8c\x0f\xea\xea\x04\x37\x02\x13\x19\xdd\x74\x11\x23\x1e\xc2\x25\x31\x5b\xc2\x42\xbb\xcc\xd8\x4a\x32\x39\xe2\x4b\xba\x18\x43\x4f\x0d\xa9\x52\x7e\x70\x7a\x22\xa5\xa9\xc9\x21\xe0\x52\x7a\x3c\x99\x32\x55\x43\x1b\xd6\x87\xf0\x7f\x3a\x33\xae\xe9\x86\xa1\xea\x93\xba\xc6\xcd\x39\xf3\xda\xf9\x8c\x76\x9f\x79\x63\x89\x64\xaa\x4d\x83\x36\xc3\xcc\x98\x89\x41\x68\x33\xa6\xc6\x18\x1e\x3f\x76\xac\x4b\x3d\xc2\xa0\x43\x7d\x46\x48\x4f\x33\x78\x52\x7d\x8a\x41\xa7\x80\xc3\x6a\x97\x20\xbb\xc4\x94\x2e\xf1\xac\x4b\xe8\x21\xd9\xd9\x05\x0f\x65\x7c\xaa\x80\xef\x5b\xaa\xfb\x80\xc0\x30\x79\xaf\xd1\x7b\xef\x5e\xe4\xaa\x08\xdf\x13\xe0\x8f\x5e\x0d\x7f\xbb\x87\x7e\x8e\xf8\x27\x3f\xe7\xc3\x2f\xfc\xad\xec\x1d\x45\xfc\xbd\xce\xee\xe3\x46\x10\x79\xda\xfa\xeb\xf7\x30\xc5\xdf\xff\x0a\xfa\xa5\xf7\x2d\xea\xff\xaf\x00\xff\x93\xfb\x05\xf6\x49\xfe\x2b\x7d\xfc\x3f\x16\xe0\xbf\x19\x17\x8a\xde\xe7\xa8\xff\x47\x15\x7f\xff\x05\xf4\xbf\x20\xf9\x8f\xf8\xf8\xdf\x17\xe0\x7f\x06\x5f\xd9\xf4\xbe\x48\xfd\x37\x04\xf8\x9f\xc4\x0b\xad\x9c\x7f\xb5\x8f\xff\xe9\x00\xff\x05\x9c\x48\xef\xa3\xd4\xff\xd9\xa0\xfc\xd1\x7f\xb3\xe4\xbf\xd6\xc7\xff\x51\xac\x3f\xda\x03\xcd\xf8\xca\x6f\x22\xf9\xd3\xfa\x7d\x3c\x40\xff\xd9\x1d\xe5\xe9\xf7\x06\xe8\xf7\xd7\x95\xa7\xff\x7a\x80\xbe\xb9\xb3\x3c\xfd\x78\x80\xfe\xec\xae\xf2\xf4\x2f\x04\xe8\x7f\x5e\x5f\x9e\xfe\x48\x80\x7e\x61\x77\x79\xfa\x1f\x04\xe8\xff\xd4\xe0\x3f\x9f\x9e\x5f\x6f\x05\xe8\x17\x03\xf4\xa9\x7c\x0d\xf5\xe9\xf5\xff\x0e\xea\x2f\x10\x9e\xd6\xef\x47\x41\xe7\x97\x4f\xff\xec\xf3\xa9\xdf\xeb\x8a\xff\xef\x7b\x39\xbc\xca\xf6\x4a\xf7\x9e\x06\x49\xdf\xfe\xbe\xf9\x77\x00\x00\x00\xff\xff\x17\xb0\x49\xb1\x80\x21\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 8576,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1641893872, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
