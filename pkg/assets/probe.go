// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x4c\x14\x57\x14\x3e\xb3\x08\x2c\x20\x05\xc5\x55\xa4\xa8\x68\xb4\xb5\xa4\xe5\xc7\xbf\x92\x9a\x46\x62\xfa\xc3\x03\x36\xb4\x31\x29\x4d\x8c\xe3\x32\x0c\xee\x0a\x2c\xdb\x99\x41\x81\xb5\xa9\x6d\x62\x62\x7d\xe2\xa1\x3f\x84\x98\x14\xb5\x69\x7c\x69\xc2\x83\x09\xbc\x2d\x0f\xa6\x21\x7d\xa2\x89\x0f\x24\x36\x29\x8f\x3c\x34\x0d\x4d\x6c\xca\x83\x65\x9a\xb9\xf7\x0c\x73\xe7\xcc\x5c\x58\x6d\x53\x30\xd9\x79\xf0\xdb\xf3\xdd\x7b\xce\x77\xee\xbd\xe7\xdc\x9d\xc5\x4f\xdf\x6e\x7f\x27\xa2\x28\xe0\x3e\x0a\xfc\x05\x9e\xe5\x3d\xd3\x07\xbd\xcf\xad\xf8\xef\x1e\x50\x20\xbb\x93\x73\xd7\x01\xa0\x10\x00\x32\xa5\xcb\xb6\x6b\xbf\x00\x00\x57\x00\xa0\x0e\x00\xb4\xd2\xc7\x8c\xcf\xde\xe1\xf3\x8b\x23\x00\x8f\x6d\xdb\xae\x26\x62\xd7\x59\x0e\x00\x31\x38\xcd\xec\x78\x31\xe7\xe9\x3c\xad\x66\x29\x10\x6f\x69\xcd\x78\x2d\xcc\x9e\x52\xb8\xfd\xa8\x32\xca\xe3\xdf\xe6\x71\x32\x35\x0b\xbe\xbc\x33\xa5\x8b\x81\xf8\x0b\xb6\x6d\x67\xef\xa2\x5d\x00\xb0\x6c\xdb\xf6\x54\x34\x3c\xbf\xa9\x2d\x9e\x7e\x24\x64\xfc\xa2\xc2\xf7\xe5\x0a\x62\x4c\xe1\x1b\x9c\xb9\x39\xc7\x74\x87\x6f\x2f\x62\x5e\xb3\x0c\xb5\x91\x5f\x90\xe7\x79\x6a\x35\xf3\x3c\xbf\x38\xea\x47\x88\x7e\x81\x93\x24\xd7\x7f\x91\xed\xff\xdc\xea\xfa\x9c\x94\x2f\xe2\xb9\xb8\xe7\x93\xfd\x0e\xd7\xb5\x05\x60\xd6\x59\xa7\x24\x6e\xb6\x00\xe3\x17\x02\x54\x63\xbc\xdd\x21\xf1\x62\x50\xba\xba\xdf\x3c\xdf\x07\x81\xfd\x7c\xb0\xe6\x79\x45\xc8\x79\xa1\x2e\xce\xfb\x4a\x98\xef\xd4\x5d\xb6\x08\xf3\x8d\xfa\xe3\x69\x37\x9f\x04\x74\x9f\xac\xa1\x9b\xc5\x7a\x8b\x15\x6f\xc5\xf3\x58\x24\x75\x11\xac\xbb\xc5\x35\xd7\xc1\x37\x6c\x18\xc7\xf7\x61\xbf\x3c\xba\x18\xbe\x9e\xf5\xfa\xc9\xcd\x2f\xfb\x31\x47\xb7\x7e\xb4\x1a\xde\x5f\x53\x25\xe1\xfb\x90\xfd\x8c\x63\xb0\xee\x78\xc0\xdc\xfb\xb2\x93\xd9\x71\x57\xe7\x5f\xf7\xe5\x7b\x7c\x1f\x48\x5f\x66\x46\xf8\xbe\xd3\xfe\x5c\xb7\x1f\x25\xf7\xc5\xd3\xf7\xe3\x49\xcc\x83\xf7\x59\x66\x44\xd2\x97\xe3\xcf\xd0\x97\x45\x62\x5f\x3e\xb4\xd7\x3e\x1f\x5e\xd8\x9b\xb7\xcf\x79\xc1\x4e\x15\xf1\xf3\xd3\x2e\x3d\x6d\x9f\xf3\x81\x47\x17\x70\xfd\x51\x8c\x8f\x18\x8b\x6e\xcc\x3d\xb2\x7e\xbf\xf1\x7b\x65\xfd\x3a\xc2\xf3\xcb\xf1\xfe\x89\x41\x8c\x9f\x47\x89\x7f\x5c\x1b\x5f\x0e\xac\x7b\x79\xad\x7b\x0c\xfb\x3f\x16\x2d\x63\x98\x19\xc1\x3e\x1a\x0f\x7e\xaf\x3d\xd3\xfd\x95\x08\xdf\xc7\xfc\xfd\x95\xbf\xbf\xf2\xf7\xd7\xff\x7f\x7f\xe5\xfb\x2e\xdf\x77\xf9\xbe\xdb\x80\xbe\xab\xe2\x18\x6f\xe6\xf5\x37\x85\xfb\xd1\x5b\xcf\xdf\x0f\xb4\x7a\xde\x87\x99\x7a\xac\xc7\x7a\xac\x83\xfa\x05\x44\xac\x93\xfa\x39\xc4\x59\xc4\x19\xc4\x69\xc4\x49\xc4\x7b\x88\x13\x88\x63\x88\xa3\x88\x37\x10\xaf\x21\x0e\x21\xa6\x11\x13\x88\x17\x10\x3b\x11\x3b\x10\xdb\x10\x5b\x11\x5b\x10\x9b\x10\x0f\x23\xd6\x21\x56\x23\x56\x22\x46\x11\x01\x71\x79\x05\xd7\x8f\xb8\x88\xb8\x80\x38\x8f\x38\x87\x38\x8b\x38\x83\x38\x8d\x38\x89\x78\x0f\x71\x82\xe1\x87\x0a\x80\x6d\x03\x54\xe0\x39\x64\xbf\xc7\xf3\x2d\x02\x98\x58\xf1\xea\xd4\x39\x97\xf3\x0a\x3f\xdf\xd7\x42\xfa\x38\xdb\x45\xcf\xbf\x9c\x9f\xeb\x6a\xfd\xdc\x5a\x81\xd0\xbf\x6b\x8c\xad\xd0\xba\x1a\x5b\xf1\xdf\x2f\xb7\x56\x82\x75\x46\xef\x15\x5a\x57\x4e\xf7\x3a\x53\x2a\x31\x9f\xfc\xe3\x3d\x25\xb8\x2f\xac\xe3\x2a\x37\x3a\x9b\xcd\xf5\x44\xb0\x6e\xa2\xf8\x39\xff\x78\x4f\x31\xee\xcd\xb2\xf3\x1d\x75\x78\xa3\xb3\xd9\x5c\xcf\x96\x8d\x4e\x60\x13\x3f\xce\x7d\xe3\x7c\x77\xb0\x3d\xca\x37\x95\xef\x29\xc1\xda\x61\x7b\x93\xbf\x8b\x7d\xcf\xbb\x1d\xed\xb0\x62\xdb\xec\x3d\xc8\xdd\x1a\x65\xe4\x03\x88\x5e\x2d\x53\xb6\x02\x7f\x3f\xae\x16\xe6\x5f\x13\x6a\xab\x16\x00\x8e\x09\x63\x73\x24\xb6\x33\x7e\x56\xb0\x87\x0a\x82\xe3\x96\x60\xb7\x29\xc1\xf1\x2f\xd7\xf1\xbf\xbf\xce\xf8\x43\xc1\xee\xcc\xb1\x2f\x7e\x67\x7d\xf4\x87\x4d\xf9\x1a\xe6\x5f\x00\x69\x12\xe7\x4d\x66\x17\xc2\x0c\x99\x3f\xc2\xf8\x62\x00\x92\xd7\x59\xe4\x13\x84\x3f\x81\xfc\x24\x89\x53\x85\x7c\x1b\xd1\xd5\x98\x5d\x02\xa3\x64\xfe\x7e\xe4\x5b\xc8\x7e\x1a\x8c\x2f\x0b\xe4\xd3\x8e\x3c\xcd\xa7\x11\x79\x9a\xcf\x56\xe4\x69\x3e\x97\x98\x5d\x1e\x88\xff\x16\xf2\x34\xfe\x61\xe4\x69\xfc\x42\xe4\x69\xfc\x73\xcc\xae\x08\xf0\xc0\x4e\xa5\x20\x48\x32\xbe\x50\xc2\x17\x4b\xf8\x12\x09\x5f\x26\xe1\xcb\x25\x7c\x45\x80\xfb\x1a\x00\xb6\x09\xdd\xe4\x7e\x9f\x5d\x65\xfc\xee\x00\x7f\x93\xf1\x3b\x57\xf9\x5a\x3c\xcf\x53\x8c\xdf\x16\xe0\x15\xc9\xf5\x36\xae\x84\xf3\x8a\x02\xb0\x5d\xd8\x07\xb7\x7f\x96\xc0\xe1\xbd\x7d\x70\xfb\xf2\x0c\xd3\xad\x0a\xe8\x66\xd9\xfc\xf2\x40\x9c\x2f\x24\xba\xe7\x59\x9c\x1d\x81\x38\xcd\x8c\xdf\x1e\xe0\xf7\x31\x3e\x16\xe0\xd3\x8c\xdf\x15\xe0\xef\xb0\x75\x79\xfb\xef\xf6\xfd\x0f\x2c\xcf\xb2\x40\x9e\x3f\x33\xde\xab\x1f\xf7\x8e\xfb\x95\xf1\x5e\xfd\xb8\xf7\x5b\x2b\xa2\x82\xaf\x68\x09\xc1\x76\x72\x1d\x15\xec\x3d\xce\x7b\xae\x70\x3e\x2f\x39\x3e\x82\x7d\x10\x00\x6e\x08\xf6\x21\x00\x58\x10\xec\x97\x1d\xbd\x88\x67\x1f\x10\xef\x69\xd4\x6b\x21\x7a\x37\xc0\xaf\xd7\x26\xd8\x7b\xc9\xb8\x93\xff\x24\x89\x37\x4f\xe2\xb5\x91\xfc\x13\x24\xff\x39\x92\x7f\x5d\xc4\x6f\x0f\x45\xfc\xeb\x99\x27\xeb\x69\x29\x20\x36\xc9\x37\x4d\xf2\x1d\x25\xf9\x4e\x93\x7c\x41\x79\xbe\xd7\xff\xbc\xe5\x3b\x2d\xc4\xab\x5d\xbd\xd7\xbd\x7c\x6b\x85\xfc\xaa\xc8\xf9\x3a\xb7\x40\xa7\x60\x3b\x5d\x3e\x24\xd8\xce\xed\x37\x26\xd8\xbb\xc8\x79\x57\x93\xf5\xb3\x5b\xb4\x27\xd9\x67\xe9\x86\x3a\x68\xea\x86\xda\x95\x4c\xc5\x8d\x61\x68\xb0\xf4\x21\x0b\xfa\xe3\x69\xb3\xd1\x32\xe2\x9a\xae\xea\x97\xf5\x94\x65\x72\xc6\xb4\xe2\x86\xa5\xba\x96\x36\x30\x98\xb2\x74\x03\xad\xbe\x01\xd3\x52\x99\x8b\x37\x59\xeb\xf5\x31\xec\x73\xb7\x9a\x4e\x76\x9b\xa0\x5e\xd6\x0d\x33\x39\x90\xe2\x23\x5c\x5c\x4d\xc7\xad\x04\xa8\x7d\x49\x4d\x4f\x99\x3a\x34\x18\x7a\x5f\x83\x9e\x50\x7b\x8c\x78\xbf\x0e\xcc\x39\x3d\x90\x4c\x59\xea\x20\xfb\x0c\x69\xdd\xe8\xe1\xe9\xb9\xcc\x60\xda\x18\xe8\xd2\x57\x2d\x43\xb7\x7c\x44\x6f\x80\xf0\x59\x8e\x9e\xa7\xd2\x28\xb0\x9e\x92\xc8\x72\x35\x1f\xe3\x0a\x88\x64\x6f\x28\xe9\x63\x4c\x3d\xd5\xad\x0a\xfb\x05\x3d\x83\x29\x4d\x4d\x76\x8b\x8b\x36\xb5\x84\xde\x8d\xff\xa6\x8d\x01\x4d\x37\x4d\x55\x1f\xd2\x35\x9a\x36\x9b\xd1\x18\x32\xaf\x3f\x9e\x4c\x35\x68\xd0\x60\x5a\x86\x15\xef\x82\x06\x73\xb8\xdf\xc1\xf6\xd3\xa7\x8f\xab\xaf\x3b\x70\x8c\xc3\x11\x0e\x4d\xea\x09\x07\x8e\xaa\xc7\xf9\x94\xa3\x7c\xca\x51\x3e\x85\x41\x33\x87\xe3\x6a\x33\x0e\x36\xe3\x28\xc7\x13\xea\x11\x1e\xe1\x08\xce\x6a\xc2\x59\x4d\x38\xab\x09\xfe\x9b\xe7\x4f\x25\xf0\x2a\xc5\x9e\xa6\x03\x1c\x3f\x27\xef\x41\xf4\x6f\x70\x3b\x90\x2b\x22\x7c\xab\x44\x8f\xfe\xbe\x3e\xa5\xac\xed\x7f\x8d\xe8\x93\xff\x96\x81\x93\x0a\x84\xbe\x4d\x8d\xee\x45\x7f\xb4\x6b\x81\xaf\xd3\xf5\x77\xbf\xdf\xde\x97\xe8\xcf\xa0\x2e\xfd\xbd\x41\xf5\xcf\x48\xf4\x2b\xf7\x71\x6c\x12\xf4\x0b\x43\xf4\x33\x12\xfd\x51\x3c\x14\xfa\x7b\x83\xea\x5f\x91\xe8\xb7\xa2\xfe\xa4\xa0\x5f\x1c\xa2\xdf\x23\xd1\x8f\xe2\x2b\x1b\xfd\xbd\x44\xf5\xbb\x24\xfa\x4b\xa8\xdf\x21\xe8\x97\x84\xe8\x57\x49\xf4\x3b\x70\xe2\x7a\xeb\xaf\x90\xad\xbf\x8e\xa3\xb8\xfe\xb2\x10\xfd\x57\x24\xfa\xb3\x65\xb9\xe9\x1f\x92\xad\x3f\x44\xbf\x3c\x44\xff\x27\x59\xfd\xe3\xab\x25\xfd\x3d\x49\xf5\x7f\x94\xe8\x4f\xec\xe7\x58\x27\xe8\x57\x84\xe8\xbf\x81\xfd\x4b\xef\x80\x31\x7c\xf5\xaf\x25\xe7\x4f\xfb\xf7\x55\x89\xff\xfd\xed\xb9\xf9\xb7\x49\xfc\xe7\xaa\x72\xf3\xff\x48\xe2\xff\xdb\x8e\xdc\xfc\x6b\x24\xfe\xd1\x9d\xb9\xf9\x5f\x97\xf8\x1f\xdc\x95\x9b\x7f\xaf\xc4\xbf\xb5\x3a\x37\xff\x6f\x24\xfe\xe7\x76\x87\xcf\xa7\xf7\xf7\x27\x12\xff\x0b\x12\x7f\x6a\xdf\x45\x7f\xfa\x73\x39\x81\xfe\x4b\x84\xa7\xf5\xfb\x2d\x84\xd7\xef\x0c\xd6\xaf\xfb\x5e\x5e\x8b\x67\x45\xeb\xf7\x6f\x25\xfc\x4f\x91\x9d\x35\x1c\x5b\x30\x61\x85\xf8\xbb\xbf\x90\xff\x09\x00\x00\xff\xff\x75\x15\xca\x5c\xf8\x2b\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 11256,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1642032777, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
